-- CREATE TABLE IF NOT EXISTS "testdb"."vt_sample_ga_iora_enc_encounterids_vTEST" AS

-- Join shells to claims, add betos to table

with Join_Shells as (
select a.*
, c.rbcs_id
, c.rbcs_cat_desc
, c.rbcs_subcat_desc
, c.rbcs_family_desc
, c.rbcs_major_ind
, b.shell_key

from "testdb"."vt_sample_ga_iora_serviceclassification" a
left join "testdb"."vt_sample_ga_iora_enc_shells_v2" b
on a.unique_key = b.unique_key

left join "reference_library"."cms_rbcs_betos" c
on a.procedure_code = c.hcpcs_cd

-- remove this in final version !!!
-- where a.member_ssn Like '%20289327%'   
  ),
 
  
Shell_Key_Proc_Hierarchy as (
  select a.*
  , row_number() over(partition by shell_key) as shell_key_rowNumber
  , (case 
     when shell_key LIKE '%AllOther%' then concat(shell_key, provider_tin)
     else shell_key end) as encounter_ID
  from Join_Shells a),
  
  
Encounter_key_max as (
select *
   , (case when encounter_ID in (select distinct encounter_ID from Shell_Key_Proc_Hierarchy where rbcs_major_ind = 'M' ) then 'M'
     when encounter_ID in (select distinct encounter_ID from Shell_Key_Proc_Hierarchy where rbcs_major_ind = 'O' ) then 'O'
     else 'N' end) as enc_key_max
   from Shell_Key_Proc_Hierarchy
   ) ,
   


/****** reassign the top rbcsID ********/
rbcs_id_identification as (
select encounter_ID
, rbcs_id
, rbcs_major_ind
, enc_key_max
, sum(allowed_amount) as allowed_amount
from Encounter_key_max
where encounter_ID is not NULL
and rbcs_id is not NULL
and reversal_flag = 1
group by 1,2,3,4),


-- Encounters with M procedure, highest in hierarchy
M_Enc as (
select *
  , row_number() over( partition by encounter_ID) as encounter_dup_count
  from (
select *
, rank() over (partition by encounter_ID order by sum_allowed desc) as rank_rbcsID
from(
select encounter_ID
, rbcs_id
, sum(allowed_amount) as sum_allowed
from rbcs_id_identification
where rbcs_major_ind = 'M'
group by 1,2))
 where rank_rbcsID = 1)
,

O_Enc as (
select *
  , row_number() over( partition by encounter_ID) as encounter_dup_count
  from (  
select *
, rank() over (partition by encounter_ID order by sum_allowed desc) as rank_rbcsID
from(
select encounter_ID
, rbcs_id
, sum(allowed_amount) as sum_allowed
from rbcs_id_identification
where rbcs_major_ind = 'O'
  and encounter_ID not in (select encounter_ID from M_Enc)
group by 1,2))
 where rank_rbcsID = 1)
,

N_Enc as (
select *
  , row_number() over( partition by encounter_ID) as encounter_dup_count
  from (  
select *
, rank() over (partition by encounter_ID order by sum_allowed desc) as rank_rbcsID
from(
select encounter_ID
, rbcs_id
, sum(allowed_amount) as sum_allowed
from rbcs_id_identification
where rbcs_major_ind = 'N'
  and encounter_ID not in (select encounter_ID from M_Enc)
  and encounter_ID not in (select encounter_ID from O_Enc)
group by 1,2))
where rank_rbcsID = 1)
  ,

Rank_rbcsID as (
select * 
from M_Enc
where encounter_dup_count = 1

UNION ALL

select * 
from O_Enc
where encounter_dup_count = 1

UNION ALL

select * 
from N_Enc
where encounter_dup_count = 1),  


/************************ Join top rbcsID back to claims **************/ 
join_top_rbcs as (
select a.*
, b.rbcs_id as top_rbcsID
from Encounter_key_max a
left join Rank_rbcsID b
on a.encounter_ID = b.encounter_ID)


select 
sum( allowed_amount)
from join_top_rbcs
